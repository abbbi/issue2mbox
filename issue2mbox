#!/usr/bin/env python3
import os
import sys
import argparse
import logging
import shutil
import mailbox
import re
from email.message import EmailMessage
from github import Github, GithubException

log_format = "[%(asctime)-15s] %(levelname)7s  %(message)s"
logging.basicConfig(format=log_format, level=logging.INFO)
log = logging.getLogger(__name__)

VERSION = "0.15"


def removetarget(target):
    """Remove target dir for easy resync"""
    if os.path.exists(target) and os.path.isdir(target):
        shutil.rmtree(target)

    if os.path.exists(target) and os.path.isfile(target):
        os.remove(target)


def get_mailbox(target, issue_number, args):
    """Mailbox or mbox?"""
    if args.mailboxtype == "mbox":
        targetfile = f"{target}/{issue_number}.mbox"
        if args.overwrite is True:
            removetarget(targetfile)
        return mailbox.mbox(f"{target}/{issue_number}.mbox")

    targetfile = f"{target}/{issue_number}"
    if args.overwrite is True:
        removetarget(targetfile)
    return mailbox.Maildir(f"{target}/{issue_number}")


def export(target, issues, project_owner, args):
    """export issue / comment data"""
    log.info("Exporting issues to [%s]", target)
    log.info("Mailbox type: %s", args.mailboxtype)

    for issue in issues:
        labels = ",".join(label.name for label in issue.get_labels())
        mb = get_mailbox(target, issue.number, args)
        mail = EmailMessage()
        log.info("[%s]: [%s] Comments: [%s]", issue.number, issue.title, issue.comments)
        mail["Subject"] = issue.title
        mail["From"] = f"{issue.user.login} <{issue.user.email}>"
        if issue.assignee is not None:
            mailto = issue.assignee
        else:
            mailto = project_owner
        mail["To"] = mailto
        mail["Date"] = issue.created_at
        mail.add_header("Message-ID", f"{issue.number}")
        if labels:
            mail.add_header("X-Labels", f"{labels}")
        mail.set_content(issue.body)
        mail.is_draft = False
        mb.add(mail.as_string())
        if issue.comments > 0:
            comments = issue.get_comments()
            for comment in comments:
                cmail = EmailMessage()
                cmail["Subject"] = f"Re: {issue.title}"
                cmail["From"] = f"{comment.user.login} <{comment.user.email}>"
                cmail["To"] = mailto
                cmail["Date"] = comment.created_at
                cmail.add_header("Message-ID", f"{comment.id}")
                cmail.set_content(comment.body)
                cmail.is_draft = False
                mb.add(cmail.as_string())

        events = issue.get_events()
        for event in events:
            if event.event != "closed":
                continue
            email = EmailMessage()
            email["Subject"] = f"Re: {issue.title}"
            email["From"] = f"{event.actor.login} <{event.actor.email}>"
            email["To"] = mailto
            email["Date"] = event.created_at
            email.add_header("Message-ID", f"{event.id}")
            email.is_draft = False
            email.set_content(f"{event.actor.login} closed this issue.")
            mb.add(email.as_string())

        mb.close()


def main():
    """Export"""
    parser = argparse.ArgumentParser(description="Export github issues as mbox")
    parser.add_argument("-r", "--repo", type=str, help="Repository", required=True)
    parser.add_argument(
        "-t", "--token", type=str, help="Github access token", required=True
    )
    parser.add_argument(
        "-d", "--dest", type=str, help="Destination directory", required=False
    )
    parser.add_argument(
        "-o",
        "--overwrite",
        help="Overwrite files in destination.",
        required=False,
        action="store_true",
    )
    parser.add_argument(
        "-m",
        "--mailboxtype",
        help="mbox or maildir",
        choices=["mbox", "maildir"],
        default="mbox",
        type=str,
        required=False,
    )

    args = parser.parse_args()

    try:
        g = Github(args.token)
        user = g.get_user()
    except GithubException as errmsg:
        log.fatal("Cant login: %s", errmsg)
        sys.exit(1)

    try:
        repo = args.repo
        match = re.match(r"^(?:https://github.com/)?\w+/(.+)$", repo)
        if match:
            repo = match.group(1)
        repo = user.get_repo(repo)
    except GithubException as errmsg:
        log.fatal("Cant locate repository: %s", errmsg)
        sys.exit(1)

    if args.dest:
        target = args.dest
    else:
        homedir = os.path.expanduser("~")
        if not homedir:
            homedir = "/tmp/"
        target = f"/{homedir}/{repo.name}"

    issues = repo.get_issues(state="all")

    if issues.totalCount == 0:
        log.error("Repository has no issues")
        sys.exit(1)

    ident = f"{target}/.issue2mbox"

    try:
        if not os.path.exists(target):
            os.makedirs(target, exist_ok=True)
    except OSError as errmsg:
        log.fatal("Cant create target: %s", errmsg)
        sys.exit(1)
    finally:
        if not os.listdir(target):
            try:
                with open(ident, "w") as filehandle:
                    filehandle.write(args.repo)
            except OSError as errmsg:
                log.fatal("Cant create ident file: %s", errmsg)
                sys.exit(1)
        else:
            if not os.path.exists(ident) and args.overwrite is True:
                log.fatal(
                    "Wont overwrite that dir, its not empty and %s does not exist.",
                    ident,
                )
                sys.exit(1)

    if args.overwrite is True:
        with open(ident, "r") as filehandle:
            targetrepo = filehandle.read()
            if not args.repo == targetrepo:
                log.fatal(
                    "Target dir includes repo [%s], but repo [%s] shall be processed wont overwrite",
                    args.repo,
                    targetrepo,
                )
                sys.exit(1)
        log.warning("Overwriting target directory")

    owner = f"{user.name} <{user.email}>"
    export(target, issues, owner, args)


if __name__ == "__main__":
    main()
